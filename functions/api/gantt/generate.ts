import { Hono } from 'hono';\nimport { HTTPException } from 'hono/http-exception';\n\n// 環境変数やKVバインディングの型定義\ntype Bindings = {\n  OPENAI_API_KEY: string;\n  // DB: D1Database;\n  // KV_GANTO_MOCKUP: KVNamespace;\n}\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\n// OpenAI APIエンドポイント\nconst OPENAI_ENDPOINT = 'https://api.openai.com/v1/chat/completions';\n// 使用するモデル\nconst OPENAI_MODEL = 'gpt-3.5-turbo'; // または 'gpt-4' など\n\napp.post('/', async (c) => {\n  const apiKey = c.env.OPENAI_API_KEY;\n  if (!apiKey) {\n    console.error('OPENAI_API_KEY is not set');\n    throw new HTTPException(500, { message: 'Server configuration error: API key missing' });\n  }\n\n  try {\n    const { title, summary, startDate, endDate } = await c.req.json();\n\n    // 簡単な入力チェック\n    if (!title || !summary || !startDate || !endDate) {\n      throw new HTTPException(400, { message: 'Missing required fields: title, summary, startDate, endDate' });\n    }\n\n    console.log(`Generating Gantt for: ${title}`);\n\n    // --- プロンプト生成 --- \n    // TODO: プロンプトは改善の余地あり\n    const prompt = `\n以下の情報に基づいて、プロジェクトのガントチャートを作成するためのタスクリストをJSON形式で生成してください。\n\n# プロジェクト情報\nタイトル: ${title}\n概要・議事録:\n\`\`\`\n${summary}\n\`\`\`\nプロジェクト期間: ${startDate} から ${endDate} まで\n\n# 指示\n- 概要から具体的なタスクを洗い出してください。\n- 各タスクに担当者を割り当ててください。担当者が不明な場合は \"未定\" としてください。\n- 各タスクの開始日と終了日を、プロジェクト期間 (${startDate} ～ ${endDate}) の範囲内で現実的に設定してください。\n- タスク間の依存関係があれば、\"dependency\" フィールドに依存先のタスクID (\"TASK-XXX\"形式) を指定してください。なければ null にしてください。\n- タスクIDは \"TASK-001\", \"TASK-002\" ... の形式で連番を振ってください。\n- JSONは配列形式とし、各要素は以下のキーを持つオブジェクトにしてください: \"id\", \"name\", \"assignee\", \"start\", \"end\", \"dependency\"\n- 開始日・終了日は \"YYYY-MM-DD\" 形式で出力してください。\n- JSONデータのみを出力し、前後に説明文などは含めないでください。\n`;\n\n    // --- OpenAI API呼び出し --- \n    const openaiResponse = await fetch(OPENAI_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: OPENAI_MODEL,\n        messages: [\n          { role: 'system', content: 'You are a helpful assistant that generates Gantt chart task lists in JSON format based on project descriptions.' },\n          { role: 'user', content: prompt },\n        ],\n        // response_format: { type: \"json_object\" }, // GPT-4 Turbo以降で利用可能。より確実にJSONを得られる。\n        temperature: 0.5, // 低めに設定して安定した出力を目指す\n      }),\n    });\n\n    if (!openaiResponse.ok) {\n      const errorBody = await openaiResponse.json();\n      console.error('OpenAI API error:', openaiResponse.status, errorBody);\n      throw new HTTPException(openaiResponse.status, { message: `Failed to generate Gantt chart from AI: ${errorBody?.error?.message || 'Unknown API error'}` });\n    }\n\n    const openaiResult = await openaiResponse.json();\n    const generatedContent = openaiResult?.choices?.[0]?.message?.content;\n\n    if (!generatedContent) {\n      console.error('OpenAI response missing content:', openaiResult);\n      throw new HTTPException(500, { message: 'AI response did not contain generated content' });\n    }\n\n    // --- AIの応答 (JSON文字列) をパース --- \n    console.log('AI Raw Response:', generatedContent); // デバッグ用\n    let tasks = [];\n    try {\n      // AIの応答が ```json ... ``` のようなマークダウン形式で返ってくる場合があるため、JSON部分を抽出\n      const jsonMatch = generatedContent.match(/```json\\n?([\\s\\S]*?)```/);\n      const jsonString = jsonMatch ? jsonMatch[1].trim() : generatedContent.trim();\n      tasks = JSON.parse(jsonString);\n      // 簡単なバリデーション (配列かどうか)\n      if (!Array.isArray(tasks)) {\n          throw new Error('Parsed result is not an array');\n      }\n      // TODO: さらに詳細なタスク形式のバリデーションを追加しても良い\n    } catch (parseError) {\n      console.error('Failed to parse AI response as JSON:', parseError, 'Raw content:', generatedContent);\n      throw new HTTPException(500, { message: 'Failed to parse AI response. The AI might have returned an invalid format.' });\n    }\n\n    console.log(`Successfully generated ${tasks.length} tasks for: ${title}`);\n\n    // --- 成功レスポンス --- \n    return c.json({\n      success: true,\n      message: 'Gantt chart tasks generated successfully',\n      tasks: tasks,\n    });\n\n  } catch (error) {\n    console.error('Gantt generation API error:', error);\n    if (error instanceof HTTPException) {\n        // HTTPExceptionの場合はそのままエラーを返す\n        return error.getResponse();\n    } else if (error instanceof SyntaxError) {\n        // リクエストボディのJSONパースエラー\n        return c.json({ success: false, message: 'Invalid request body' }, 400);\n    } else {\n        // その他の予期せぬエラー\n        return c.json({ success: false, message: 'An internal error occurred during Gantt generation' }, 500);\n    }\n  }\n});\n\n// Cloudflare Pages Functionsのエクスポート形式\nexport const onRequestPost = (context: any) => {\n  return app.fetch(context.request, context.env, context);\n};
